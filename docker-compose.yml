services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: podcast_db
      POSTGRES_USER: podcast_user
      POSTGRES_PASSWORD: podcast_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U podcast_user -d podcast_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Prefect Server
  prefect-server:
    image: prefecthq/prefect:2.14-python3.9
    ports:
      - "4200:4200"
    environment:
      - PREFECT_UI_URL=http://0.0.0.0:4200/api
      - PREFECT_API_URL=http://0.0.0.0:4200/api
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_API_DATABASE_CONNECTION_URL=postgresql+asyncpg://podcast_user:podcast_pass@postgres:5432/podcast_db
    depends_on:
      postgres:
        condition: service_healthy
    command: prefect server start --host 0.0.0.0
    volumes:
      - prefect_data:/opt/prefect
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM); sock.settimeout(5); result = sock.connect_ex(('localhost', 4200)); sock.close(); exit(0 if result == 0 else 1)"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 120s
    restart: unless-stopped

  # Prefect Worker
  prefect-worker:
    build:
      context: .
      dockerfile: Dockerfile.prefect
    env_file:
      - .env
    environment:
      - PREFECT_API_URL=http://prefect-server:4200/api
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    depends_on:
      prefect-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./:/app
    command: >
      sh -c "
        echo 'Waiting for Prefect server...' &&
        sleep 30 &&
        echo 'Starting Prefect worker first to create work pool...' &&
        prefect worker start --pool 'default-agent-pool' --name 'podcast-worker' &
        WORKER_PID=$$! &&
        sleep 20 &&
        echo 'Deploying Prefect flows...' &&
        python scripts/deploy_prefect_simple.py &&
        echo 'Waiting for worker...' &&
        wait $$WORKER_PID
      "
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "5050:5000"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      prefect-server:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_URL=redis://redis:6379
      - PREFECT_API_URL=http://prefect-server:4200/api
      - PYTHONPATH=/app
    volumes:
      - ./:/app
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; print(requests.get('http://localhost:5000/health').status_code)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker Services (Keep existing Kafka workers)
  outline-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/outline_worker.py

  outline-evaluation-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/outline_evaluation_worker.py

  outline-guardrails-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/outline_guardrails_worker.py

  outline-approval-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/outline_approval_worker.py

  script-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/script_worker.py

  script-evaluation-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/script_evaluation_worker.py

  script-guardrails-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/script_guardrails_worker.py

  script-approval-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/script_approval_worker.py

  tts-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/tts_worker.py

  tts-evaluation-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/tts_evaluation_worker.py

  audio-approval-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/audio_approval_worker.py

  publishing-worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://podcast_user:podcast_pass@postgres:5432/podcast_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - PYTHONPATH=/app
    volumes:
      - ./:/app
    command: python workers/publishing_worker.py

volumes:
  postgres_data:
  api_logs:
  prefect_data:

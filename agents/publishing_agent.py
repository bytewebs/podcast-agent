from agents.base_agent import BaseAgent
from messaging.topics import KafkaTopics
from database.models import JobStatus
from storage.s3_client import S3Client
from utils.config import config
import xml.etree.ElementTree as ET
from datetime import datetime, timezone

class PublishingAgent(BaseAgent):
    """Agent responsible for publishing podcast and updating RSS feed"""
    
    def __init__(self):
        super().__init__("publishing")
        self.s3_client = S3Client()
    
    def process(self, message: dict):
        """Publish podcast and update RSS feed"""
        job_id = message["job_id"]
        
        try:
            self.logger.info(f"Publishing podcast for job {job_id}")
            self.update_job_status(job_id, JobStatus.PUBLISHING.value)
            
            # Get job details
            job = self.repo.get_job(job_id)
            if not job:
                raise Exception(f"Job {job_id} not found")
            
            # Generate RSS entry
            rss_entry = self._create_rss_entry(job)
            
            # Update or create RSS feed
            rss_feed_url = self._update_rss_feed(job, rss_entry)
            
            # Create metadata file
            metadata_url = self._create_metadata(job)
            
            # Update database
            self.repo.update_job(job_id, {
                "status": JobStatus.COMPLETED.value,
                "rss_feed_url": rss_feed_url,
                "completed_at": datetime.now(timezone.utc)
            })
            
            self.logger.info(f"Successfully published podcast for job {job_id}")
            
        except Exception as e:
            self.handle_error(job_id, f"Publishing failed: {str(e)}")
    
    def _create_rss_entry(self, job) -> ET.Element:
        """Create RSS entry for podcast"""
        item = ET.Element("item")
        
        # Title
        title = ET.SubElement(item, "title")
        title.text = job.outline["title"]
        
        # Description
        description = ET.SubElement(item, "description")
        description.text = job.outline["introduction"]
        
        # Link
        link = ET.SubElement(item, "link")
        link.text = job.audio_url
        
        # Enclosure (audio file)
        enclosure = ET.SubElement(item, "enclosure")
        enclosure.set("url", job.audio_url)
        enclosure.set("type", "audio/mpeg")
        
        # GUID
        guid = ET.SubElement(item, "guid")
        guid.text = job.job_id
        guid.set("isPermaLink", "false")
        
        # Publication date
        pub_date = ET.SubElement(item, "pubDate")
        pub_date.text = datetime.now(timezone.utc).strftime("%a, %d %b %Y %H:%M:%S GMT")
        
        # Duration
        duration = ET.SubElement(item, "itunes:duration")
        duration.text = str(job.brief["length_minutes"] * 60)
        
        return item
    
    def _update_rss_feed(self, job, rss_entry) -> str:
        """Update RSS feed with new entry"""
        feed_key = "podcasts/rss/feed.xml"
        
        try:
            # Try to get existing feed
            existing_feed = self.s3_client.get_file(feed_key)
            root = ET.fromstring(existing_feed)
        except:
            # Create new feed
            root = self._create_new_feed()
            
        channel = root.find("channel")
        if channel is None:
            raise ValueError("RSS feed structure invalid: missing <channel> element.")
        
        # Add new item
        channel.append(rss_entry)
        
        # Save feed
        feed_content = ET.tostring(root, encoding="utf-8", method="xml")
        feed_url = self.s3_client.upload_content(feed_content, feed_key, "application/rss+xml")
        
        return feed_url
    
    def _create_new_feed(self) -> ET.Element:
        """Create new RSS feed structure"""
        rss = ET.Element("rss")
        rss.set("version", "2.0")
        rss.set("xmlns:itunes", "http://www.itunes.com/dtds/podcast-1.0.dtd")
        
        channel = ET.SubElement(rss, "channel")
        
        title = ET.SubElement(channel, "title")
        title.text = "AI Generated Podcasts"
        
        description = ET.SubElement(channel, "description")
        description.text = "Podcasts generated by AI"
        
        link = ET.SubElement(channel, "link")
        link.text = f"https://{config.S3_BUCKET_NAME}.s3.amazonaws.com/podcasts/rss/feed.xml"
        
        return rss
    
    def _create_metadata(self, job) -> str:
        """Create and upload metadata file"""
        metadata = {
            "job_id": job.job_id,
            "title": job.outline["title"],
            "created_at": job.created_at.isoformat(),
            "duration_minutes": job.brief["length_minutes"],
            "topic": job.brief["topic"],
            "tone": job.brief["tone"],
            "audio_url": job.audio_url
        }
        
        metadata_key = f"podcasts/{job.job_id}/metadata.json"
        return self.s3_client.upload_json(metadata, metadata_key)